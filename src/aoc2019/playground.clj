(ns aoc2019.playground)

; ======================================================================================================================
; IF TESTING
; ======================================================================================================================
(defn if-test [v]
  "other thing"
  (if (< v 20) true false))
;
;(defn if-let-test []
;  (if-let [a 4]
;    (< (+ a 10) 9)
;    a
;    )
;  )

(defn what []
  (let [x 4]
    x
    )
  )
;(println (what))
;(defn aoc2-a
;  "problem 2"
;  []
;
;  )
;(println (if-test 10))



; ======================================================================================================================
; RECURSION
; ======================================================================================================================

(defn recursive-sum [nums]
  (loop [nums nums
         acc 0]
    (if (empty? nums)
      acc
      (let [[f & r] nums]
        (recur r (+ acc f)))
      )
    )
  )

(println (recursive-sum [1 2 72 95]))

; ======================================================================================================================
; VECTORS
; ======================================================================================================================

(def v [1 2 3 4 5])
(println ())
